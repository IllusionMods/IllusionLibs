<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<doc>
  <members>
    <assembly>
      <name>UnityEngine.SubsystemsModule</name>
    </assembly>
    <member name="T:UnityEngine.IntegratedSubsystem">
      <summary>
        <para>An IntegratedSubsystem is initialized from an IntegratedSubsystemDescriptor for a given Subsystem (Example, Input, Environment, Display, etc.) and provides an interface to interact with that given IntegratedSubsystem until it is Destroyed. After an IntegratedSubsystem is created it can be Started or Stopped to turn on and off functionality (and preserve performance). The base type for IntegratedSubsystem only exposes this functionality; this class is designed to be a base class for derived classes that expose more functionality specific to a given IntegratedSubsystem.

            Note: initializing a second IntegratedSubsystem from the same IntegratedSubsystemDescriptor will return a reference to the existing IntegratedSubsystem as only one IntegratedSubsystem is currently allowed for a single IntegratedSubsystem provider.
            </para>
      </summary>
    </member>
    <member name="P:UnityEngine.IntegratedSubsystem.running">
      <summary>
        <para>Whether or not the subsystem is running.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.IntegratedSubsystem.Destroy">
      <summary>
        <para>Destroys this instance of a subsystem.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.IntegratedSubsystem.Start">
      <summary>
        <para>Starts an instance of a subsystem.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.IntegratedSubsystem.Stop">
      <summary>
        <para>Stops an instance of a subsystem.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.IntegratedSubsystemDescriptor">
      <summary>
        <para>Information about a subsystem that can be queried before creating a subsystem instance.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.IntegratedSubsystemDescriptor.id">
      <summary>
        <para>A unique string that identifies the subsystem that this Descriptor can create.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.ISubsystem">
      <summary>
        <para>Interface implemented by both Subsystem and IntegratedSubsystem which provides control over the state of either.
            </para>
      </summary>
    </member>
    <member name="P:UnityEngine.ISubsystem.running">
      <summary>
        <para>Will be true if asking the subsytem to start was successful. False in the case that the subsystem has stopped, was asked to stop or has not been started yet.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ISubsystem.Destroy">
      <summary>
        <para>Destroys this instance of a subsystem.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ISubsystem.Start">
      <summary>
        <para>Starts an instance of a subsystem.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ISubsystem.Stop">
      <summary>
        <para>Stops an instance of a subsystem.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.ISubsystemDescriptor">
      <summary>
        <para>A subsystem descriptor is metadata about a subsystem which can be inspected before loading / initializing a subsystem.
            </para>
      </summary>
    </member>
    <member name="P:UnityEngine.ISubsystemDescriptor.id">
      <summary>
        <para>A unique string that identifies the subsystem that this Descriptor can create.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ISubsystemDescriptor.Create">
      <summary>
        <para>Creates an ISubsystem from this descriptor.</para>
      </summary>
      <returns>
        <para>An instance of ISubsystem.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Subsystem">
      <summary>
        <para>A Subsystem is initialized from a SubsystemDescriptor for a given Subsystem (Example, Input, Environment, Display, etc.) and provides an interface to interact with that given Subsystem until it is Destroyed. After a Subsystem is created it can be Started or Stopped to turn on and off functionality (and preserve performance). The base type for Subsystem only exposes this functionality; this class is designed to be a base class for derived classes that expose more functionality specific to a given Subsystem.

            Note: initializing a second Subsystem from the same SubsystemDescriptor will return a reference to the existing Subsystem as only one Subsystem is currently allowed for a single Subsystem provider.
            </para>
      </summary>
    </member>
    <member name="P:UnityEngine.Subsystem.running">
      <summary>
        <para>Whether or not the subsystem is running.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Subsystem.Destroy">
      <summary>
        <para>Destroys this instance of a subsystem.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Subsystem.Start">
      <summary>
        <para>Starts an instance of a subsystem.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Subsystem.Stop">
      <summary>
        <para>Stops an instance of a subsystem.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SubsystemDescriptor">
      <summary>
        <para>Information about a subsystem that can be queried before creating a subsystem instance.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SubsystemDescriptor.id">
      <summary>
        <para>A unique string that identifies the subsystem that this Descriptor can create.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SubsystemDescriptor.subsystemImplementationType">
      <summary>
        <para>The System.Type of the subsystem implementation associated with this descriptor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SubsystemManager">
      <summary>
        <para>Gives access to subsystems which provide additional functionality through plugins.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.SubsystemManager.reloadSubsytemsCompleted(System.Action)">
      <summary>
        <para>Called from SubsystemManager when it has completed reloading all XR SDK Provider packaged subsystems.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="?:UnityEngine.SubsystemManager.reloadSubsytemsStarted(System.Action)">
      <summary>
        <para>Called from SubsystemManager before reloading all XR SDK Provider packaged subsystems.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="M:UnityEngine.SubsystemManager.GetAllSubsystemDescriptors(System.Collections.Generic.List`1&lt;UnityEngine.ISubsystemDescriptor&gt;)">
      <summary>
        <para>Gets all of the currently known subsystem descriptors regardless of specific subsystem type.</para>
      </summary>
      <param name="descriptors">Subsystem descriptors.</param>
    </member>
    <member name="M:UnityEngine.SubsystemManager.GetInstances(System.Collections.Generic.List`1&lt;T&gt;)">
      <summary>
        <para>Returns active Subsystems of a specific instance type.</para>
      </summary>
      <param name="instances">Active instances.</param>
    </member>
    <member name="M:UnityEngine.SubsystemManager.GetSubsystemDescriptors(System.Collections.Generic.List`1&lt;T&gt;)">
      <summary>
        <para>Returns a list of SubsystemDescriptors which describe additional functionality that can be enabled.</para>
      </summary>
      <param name="descriptors">Subsystem specific descriptors.</param>
    </member>
    <member name="A:UnityEngine.SubsystemsModule">
      <summary>
        <para>The Subsystem module contains the definitions and runtime support for general subsystems in Unity.</para>
      </summary>
    </member>
  </members>
</doc>
